// Generated by CoffeeScript 1.9.3
(function() {
  var API, Mapping, SchemaManager;

  SchemaManager = require("./schema_manager");

  module.exports = API = (function() {
    function API(arg) {
      var definition, mapping, mappings, name, ref1;
      this.service_url = arg.service_url, mappings = arg.mappings, this.resources = arg.resources, this.schemas = arg.schemas;
      if (!(mappings && this.resources && this.schemas)) {
        throw new Error("API specification must provide mappings, resources, and schemas");
      }
      this.mappings = {};
      for (name in mappings) {
        mapping = mappings[name];
        this.mappings[name] = new Mapping(this, mapping);
      }
      ref1 = this.resources;
      for (name in ref1) {
        definition = ref1[name];
        definition.name = name;
      }
      this.schema_manager = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(SchemaManager, this.schemas, function(){});
    }

    API.prototype.decorate = function(context, schema, data) {
      var constructor, mapping, name, _ref;
      if ((name = (_ref = schema.id) != null ? _ref.split("#")[1] : void 0) != null) {
        if ((mapping = this.mappings[name]) != null) {
          constructor = mapping.constructor;
          data = new constructor(context, data);
        }
      }
      return this._decorate(context, schema, data) || data;
    };

    API.prototype._decorate = function(context, schema, data) {
      var addprop, i, item, j, key, len, ref, ref1, ref2, result, results, value;
      if ((schema == null) || (data == null)) {
        return;
      }
      if (ref = schema.$ref) {
        if ((schema = this.schema_manager.find(ref)) != null) {
          return this.decorate(context, schema, data);
        } else {
          console.error("Can't find ref:", ref);
          return data;
        }
      } else {
        if (schema.type === "array") {
          if (schema.items != null) {
            results = [];
            for (i = j = 0, len = data.length; j < len; i = ++j) {
              item = data[i];
              if ((result = this.decorate(context, schema.items, item)) != null) {
                results.push(data[i] = result);
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        } else {
          switch (schema.type) {
            case "string":
            case "number":
            case "integer":
            case "boolean":
              return null;
            default:
              ref1 = schema.properties;
              for (key in ref1) {
                value = ref1[key];
                if ((result = this.decorate(context, value, data[key])) != null) {
                  data[key] = result;
                }
              }
              if (addprop = schema.additionalProperties) {
                for (key in data) {
                  value = data[key];
                  if (!((ref2 = schema.properties) != null ? ref2[key] : void 0)) {
                    data[key] = this.decorate(context, addprop, value);
                  }
                }
              }
              return data;
          }
        }
      }
    };

    return API;

  })();

  API.Mapping = Mapping = (function() {
    function Mapping(api, arg) {
      var resource;
      this.name = arg.name, this.resource = arg.resource, this.url = arg.url, this.template = arg.template, this.path = arg.path, this.query = arg.query;
      this.service_url = api.service_url;
      if (this.resource == null) {
        this.resource = this.name;
      }
      if (!((this.url != null) || (this.path != null) || (this.template != null))) {
        throw new Error("Mapping is missing any form of URL specification");
      }
      if ((resource = api.resources[this.resource]) == null) {
        throw new Error("Mapping specifies a resource that is not defined");
      }
      this.resource = resource;
    }

    Mapping.prototype.generate_url = function(params) {
      var j, k, key, keys, len, len1, out, part, parts, path, query, query_string, schema, string, template, url;
      if (params == null) {
        params = {};
      }
      url = this.service_url;
      path = "";
      if (params.constructor === String) {
        url = params;
      } else if (params.url) {
        url = params.url;
      } else if (this.url != null) {
        url = this.url;
      } else if ((template = this.template) != null) {
        parts = template.split("/");
        out = [];
        for (j = 0, len = parts.length; j < len; j++) {
          part = parts[j];
          if (part.indexOf(":") === 0) {
            key = part.slice(1);
            if ((string = params[key]) != null) {
              out.push(string);
            } else {
              throw new Error("Missing key: '" + key + "' in params: " + (JSON.stringify(params)));
            }
          } else {
            out.push(part);
          }
        }
        url = url + out.join("/");
      } else if (this.path != null) {
        path = this.path;
      } else {
        throw new Error("Unusable URL mapping.  Must have url, path, or template field.\nMapping: " + (JSON.stringify(this, null, 2)));
      }
      query_string = "";
      if ((query = this.query) != null) {
        parts = [];
        keys = Object.keys(query).sort();
        for (k = 0, len1 = keys.length; k < len1; k++) {
          key = keys[k];
          schema = query[key];
          if ((string = params[key]) != null) {
            parts.push((encodeURIComponent(key)) + "=" + (encodeURIComponent(string)));
          }
        }
        if (parts.length > 0) {
          query_string = "?" + (parts.join('&'));
        } else {
          query_string = "";
        }
      }
      return encodeURI(url + path) + query_string;
    };

    return Mapping;

  })();

}).call(this);
