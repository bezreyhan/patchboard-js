// Generated by CoffeeScript 1.9.3
(function() {
  var Action, EventEmitter, Request, type,
    slice = [].slice;

  Request = require("./request");

  type = require("fairmont").type;

  EventEmitter = require("events").EventEmitter;

  module.exports = Action = (function() {
    function Action(client, name, definition) {
      var ref, request, response;
      this.client = client;
      this.name = name;
      this.definition = definition;
      this.api = this.client.api;
      ref = this.definition, request = ref.request, response = ref.response;
      this.status = (response != null ? response.status : void 0) || 200;
      if ((request != null ? request.type : void 0) != null) {
        this.request_schema = this.api.schema_manager.find({
          mediaType: request.type
        });
      }
      if ((response != null ? response.type : void 0) != null) {
        this.response_schema = this.api.schema_manager.find({
          mediaType: response.type
        });
      }
      this._base_headers = this.base_headers(this.definition);
    }

    Action.prototype.base_headers = function() {
      var headers;
      headers = {
        "User-Agent": "patchboard-js"
      };
      if (this.request_schema != null) {
        headers["Content-Type"] = this.request_schema.mediaType;
      }
      if (this.response_schema != null) {
        headers["Accept"] = this.response_schema.mediaType;
      }
      return headers;
    };

    Action.prototype.create_request = function() {
      var args, body, context, credential, key, options, ref, ref1, request, resource, result, scheme, schemes, url, value;
      resource = arguments[0], url = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      context = resource.context;
      options = this.process_args(args);
      request = {
        url: url,
        method: this.definition.method,
        headers: {}
      };
      if ((body = this.prepare_body(options)) != null) {
        request.body = body;
      }
      ref = this._base_headers;
      for (key in ref) {
        value = ref[key];
        request.headers[key] = value;
      }
      schemes = (ref1 = this.definition.request) != null ? ref1.authorization : void 0;
      if ((schemes != null ? schemes.constructor : void 0) === String) {
        schemes = [schemes];
      }
      if ((schemes != null) && (context.authorizer != null)) {
        result = context.authorizer(schemes, resource, this.name, request);
        if (result != null) {
          scheme = result.scheme, credential = result.credential;
          request.headers["Authorization"] = scheme + " " + credential;
        }
      }
      return request;
    };

    Action.prototype.request = function() {
      var _args, args, callback, error, events, i, options, request, resource, url;
      resource = arguments[0], url = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      events = new EventEmitter();
      _args = 2 <= args.length ? slice.call(args, 0, i = args.length - 1) : (i = 0, []), callback = args[i++];
      if (typeof callback === "function") {
        args = _args;
        events.on("error", function(error) {});
      } else {
        callback = void 0;
      }
      try {
        options = this.create_request.apply(this, [resource, url].concat(slice.call(args)));
      } catch (_error) {
        error = _error;
        if (typeof callback === "function") {
          callback(error);
        }
        events.emit("error", error);
        return;
      }
      request = new Request(options);
      request.on("error", (function(_this) {
        return function(error) {
          if (typeof callback === "function") {
            callback(error);
          }
          return events.emit("error", error);
        };
      })(this));
      request.on("success", (function(_this) {
        return function(response) {
          if (response.status !== _this.status) {
            error = new Error("Unexpected response status: " + response.status);
            error.status = response.status;
            error.response = response;
            if (typeof callback === "function") {
              callback(error);
            }
            return events.emit("error", error);
          } else {
            if (_this.response_schema != null) {
              try {
                response.data = JSON.parse(response.body);
              } catch (_error) {
                error = _error;
                error = new Error("Unparseable response body");
                return;
              }
              resource = _this.api.decorate(resource.context, _this.response_schema, response.data);
              Object.defineProperty(resource, "response", {
                value: response,
                enumerable: false
              });
              if (typeof callback === "function") {
                callback(null, resource);
              }
              return events.emit("success", resource);
            }
          }
        };
      })(this));
      return events;
    };

    Action.prototype.process_args = function(args) {
      var content_required, options, signature;
      options = {};
      signature = (args.map(function(arg) {
        return type(arg);
      })).join(".");
      content_required = this.request_schema;
      if (content_required != null) {
        switch (signature) {
          case "string":
            options.body = args[0];
            break;
          case "object":
            options.content = args[0];
            break;
          case "array":
            options.content = args[0];
            break;
          default:
            throw new Error("Invalid arguments for action; content required");
        }
      } else {
        switch (signature) {
          case "":
            args;
            break;
          default:
            throw new Error("Invalid arguments for action");
        }
      }
      return options;
    };

    Action.prototype.prepare_body = function(options) {
      if (options.content != null) {
        return JSON.stringify(options.content);
      } else if (options.body != null) {
        return options.body;
      } else {
        return void 0;
      }
    };

    return Action;

  })();

}).call(this);
